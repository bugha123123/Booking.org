// <auto-generated />
using System;
using Hotel.org.ApplicationDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotel.org.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240605163343_flightimagesdone")]
    partial class flightimagesdone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hotel.org.Models.BookedFlights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("FlightsId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FlightsId");

                    b.HasIndex("UserId");

                    b.ToTable("BookedFlights");
                });

            modelBuilder.Entity("Hotel.org.Models.BookedHotels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookedHotelImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaidAtBooking")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("bookedHotels");
                });

            modelBuilder.Entity("Hotel.org.Models.FavouritedFlights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouritedFlights");
                });

            modelBuilder.Entity("Hotel.org.Models.Favourites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FavoutiredHotelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("Hotel.org.Models.Flights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FromLat")
                        .HasColumnType("float");

                    b.Property<double>("FromLong")
                        .HasColumnType("float");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Airline = "American Airlines (AA)",
                            ArrivalTime = new DateTime(2024, 6, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 6, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from New York City to Miami",
                            FlightNumber = "AA123",
                            From = "New York City (JFK Airport)",
                            FromLat = 40.644399999999997,
                            FromLong = -73.974000000000004,
                            HotelId = 1,
                            Image = "/Images/flight1.jpg",
                            Price = 150.00m,
                            Rating = 4.5,
                            To = "The Ritz-Carlton, Tokyo"
                        },
                        new
                        {
                            Id = 2,
                            Airline = "United Airlines (UA)",
                            ArrivalTime = new DateTime(2024, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 7, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from Los Angeles to Denver",
                            FlightNumber = "BB234",
                            From = "Los Angeles, California (LAX Airport)",
                            FromLat = 34.052199999999999,
                            FromLong = -118.2437,
                            HotelId = 2,
                            Image = "/Images/flight2.jpg",
                            Price = 200.00m,
                            Rating = 4.0,
                            To = "Hotel de Paris Monte-Carlo"
                        },
                        new
                        {
                            Id = 3,
                            Airline = "Delta Air Lines (DL)",
                            ArrivalTime = new DateTime(2024, 8, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 8, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from Chicago to Seattle",
                            FlightNumber = "CC345",
                            From = "Chicago, Illinois (ORD Airport)",
                            FromLat = 41.881900000000002,
                            FromLong = -87.898600000000002,
                            HotelId = 3,
                            Image = "/Images/flight3.jpg",
                            Price = 250.00m,
                            Rating = 4.2999999999999998,
                            To = "The Plaza Hotel"
                        },
                        new
                        {
                            Id = 4,
                            Airline = "American Airlines (AA)",
                            ArrivalTime = new DateTime(2024, 9, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 9, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from Dallas to Honolulu",
                            FlightNumber = "DD456",
                            From = "Dallas, Texas (DFW Airport)",
                            FromLat = 32.854700000000001,
                            FromLong = -97.092799999999997,
                            HotelId = 4,
                            Image = "/Images/flight4.jpg",
                            Price = 220.00m,
                            Rating = 4.7000000000000002,
                            To = "Burj Al Arab"
                        },
                        new
                        {
                            Id = 5,
                            Airline = "Southwest Airlines (WN)",
                            ArrivalTime = new DateTime(2024, 10, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from Washington D.C. to Atlanta",
                            FlightNumber = "EE567",
                            From = "Washington D.C. (DCA Airport)",
                            FromLat = 38.895099999999999,
                            FromLong = -77.036699999999996,
                            HotelId = 5,
                            Image = "/Images/flight5.jpg",
                            Price = 180.00m,
                            Rating = 3.8999999999999999,
                            To = "The Savoy Hotel"
                        },
                        new
                        {
                            Id = 6,
                            Airline = "United Airlines (UA)",
                            ArrivalTime = new DateTime(2024, 11, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 11, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from San Francisco to Austin",
                            FlightNumber = "FF678",
                            From = "San Francisco, California (SFO Airport)",
                            FromLat = 37.618899999999996,
                            FromLong = -122.3777,
                            HotelId = 6,
                            Image = "/Images/flight6.jpg",
                            Price = 190.00m,
                            Rating = 4.0999999999999996,
                            To = "Raffles Hotel"
                        },
                        new
                        {
                            Id = 7,
                            Airline = "Delta Air Lines (DL)",
                            ArrivalTime = new DateTime(2024, 12, 1, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 1, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from Seattle to Boston",
                            FlightNumber = "GG789",
                            From = "Seattle, Washington (SEA Airport)",
                            FromLat = 47.448999999999998,
                            FromLong = -122.3019,
                            HotelId = 7,
                            Image = "/Images/flight7.jpg",
                            Price = 210.00m,
                            Rating = 4.4000000000000004,
                            To = "Four Seasons Hotel George V"
                        },
                        new
                        {
                            Id = 8,
                            Airline = "Frontier Airlines (F9)",
                            ArrivalTime = new DateTime(2024, 12, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from Denver to Salt Lake City",
                            FlightNumber = "HH890",
                            From = "Denver, Colorado (DEN Airport)",
                            FromLat = 39.864699999999999,
                            FromLong = -104.67359999999999,
                            HotelId = 8,
                            Image = "/Images/flight8.jpg",
                            Price = 230.00m,
                            Rating = 4.2000000000000002,
                            To = "The Oberoi Amarvilas"
                        },
                        new
                        {
                            Id = 9,
                            Airline = "Spirit Airlines (NK)",
                            ArrivalTime = new DateTime(2024, 12, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 20, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from Miami to Las Vegas",
                            FlightNumber = "II901",
                            From = "Miami, Florida (MIA Airport)",
                            FromLat = 25.761700000000001,
                            FromLong = -80.180599999999998,
                            HotelId = 9,
                            Image = "/Images/flight9.jpg",
                            Price = 240.00m,
                            Rating = 4.5999999999999996,
                            To = " Mandarin Oriental Bangkok "
                        },
                        new
                        {
                            Id = 10,
                            Airline = "Delta Air Lines (DL)",
                            ArrivalTime = new DateTime(2024, 12, 25, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2024, 12, 25, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Non-stop flight from Atlanta to Orlando",
                            FlightNumber = "JJ012",
                            From = "Atlanta, Georgia (ATL Airport)",
                            FromLat = 33.636699999999998,
                            FromLong = -84.428100000000001,
                            HotelId = 10,
                            Image = "/Images/flight10.jpg",
                            Price = 250.00m,
                            Rating = 4.7999999999999998,
                            To = "Marina Bay Sands"
                        });
                });

            modelBuilder.Entity("Hotel.org.Models.Hotels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AveragePricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Breakfast")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("time");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gym")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<double>("PaidA")
                        .HasColumnType("float");

                    b.Property<bool>("Parking")
                        .HasColumnType("bit");

                    b.Property<bool>("Pool")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RoomImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Wifi")
                        .HasColumnType("bit");

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<double>("longitute")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Tokyo Midtown 9-7-1 Akasaka Minato-ku",
                            AveragePricePerNight = 600m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 15, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 12, 0, 0, 0),
                            City = "Tokyo",
                            ContactEmail = "info@ritzcarlton-tokyo.com",
                            ContactPhone = "+81334231811",
                            Country = "Japan",
                            Description = "Luxurious accommodations with breathtaking views of Tokyo.",
                            Gym = true,
                            Name = "The Ritz-Carlton, Tokyo",
                            NumberOfAdults = 2,
                            NumberOfChildren = 3,
                            NumberOfRooms = 245,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = true,
                            PostalCode = "107-6245",
                            Rating = 4,
                            RoomImage = "/Images/luxury_resort.jpg",
                            RoomTypes = "Deluxe, Executive, Suite",
                            Wifi = true,
                            lat = 35.665500000000002,
                            longitute = 139.72970000000001
                        },
                        new
                        {
                            Id = 2,
                            Address = "Place du Casino",
                            AveragePricePerNight = 750m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 14, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 12, 0, 0, 0),
                            City = "Monte Carlo",
                            ContactEmail = "info@montecarlosbm.com",
                            ContactPhone = "+37798062121",
                            Country = "Monaco",
                            Description = "Experience the grandeur and elegance in the heart of Monaco.",
                            Gym = true,
                            Name = "Hotel de Paris Monte-Carlo",
                            NumberOfAdults = 0,
                            NumberOfChildren = 0,
                            NumberOfRooms = 182,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = true,
                            PostalCode = "98000",
                            Rating = 3,
                            RoomImage = "/Images/mountain_lodge.jpg",
                            RoomTypes = "Standard, Deluxe, Suite",
                            Wifi = true,
                            lat = 43.738399999999999,
                            longitute = 7.4256000000000002
                        },
                        new
                        {
                            Id = 3,
                            Address = "768 5th Ave",
                            AveragePricePerNight = 900m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 15, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 12, 0, 0, 0),
                            City = "New York",
                            ContactEmail = "info@theplazany.com",
                            ContactPhone = "+12127594600",
                            Country = "USA",
                            Description = "An iconic luxury hotel in the heart of New York City.",
                            Gym = true,
                            Name = "The Plaza Hotel",
                            NumberOfAdults = 0,
                            NumberOfChildren = 0,
                            NumberOfRooms = 282,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = false,
                            PostalCode = "10019",
                            Rating = 5,
                            RoomImage = "/Images/city_center_hotel.jpg",
                            RoomTypes = "Standard, Deluxe, Suite",
                            Wifi = true,
                            lat = 40.764499999999998,
                            longitute = -73.974199999999996
                        },
                        new
                        {
                            Id = 4,
                            Address = "Jumeirah St, Umm Suqeim 3",
                            AveragePricePerNight = 1200m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 15, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 12, 0, 0, 0),
                            City = "Dubai",
                            ContactEmail = "info@burjalarab.com",
                            ContactPhone = "+97143017777",
                            Country = "United Arab Emirates",
                            Description = "The epitome of Arabian luxury in Dubai.",
                            Gym = true,
                            Name = "Burj Al Arab",
                            NumberOfAdults = 2,
                            NumberOfChildren = 3,
                            NumberOfRooms = 202,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = true,
                            PostalCode = "",
                            Rating = 2,
                            RoomImage = "/Images/coastal_retreat.jpg",
                            RoomTypes = "Standard, Deluxe, Suite",
                            Wifi = true,
                            lat = 25.141200000000001,
                            longitute = 55.185299999999998
                        },
                        new
                        {
                            Id = 5,
                            Address = "Strand",
                            AveragePricePerNight = 800m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 14, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 12, 0, 0, 0),
                            City = "London",
                            ContactEmail = "info@savoylondon.com",
                            ContactPhone = "+442074836000",
                            Country = "United Kingdom",
                            Description = "Historic luxury hotel in the heart of London.",
                            Gym = true,
                            Name = "The Savoy Hotel",
                            NumberOfAdults = 2,
                            NumberOfChildren = 3,
                            NumberOfRooms = 267,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = true,
                            PostalCode = "WC2R 0EZ",
                            Rating = 2,
                            RoomImage = "/Images/rural_farmstay.jpg",
                            RoomTypes = "Standard, Deluxe, Suite",
                            Wifi = true,
                            lat = 51.509999999999998,
                            longitute = -0.12
                        },
                        new
                        {
                            Id = 6,
                            Address = "1 Beach Road",
                            AveragePricePerNight = 700m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 14, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 12, 0, 0, 0),
                            City = "Singapore",
                            ContactEmail = "info@raffles.com",
                            ContactPhone = "+6563371886",
                            Country = "Singapore",
                            Description = "A historic hotel that epitomizes the romance of the Far East.",
                            Gym = true,
                            Name = "Raffles Hotel",
                            NumberOfAdults = 2,
                            NumberOfChildren = 3,
                            NumberOfRooms = 115,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = true,
                            PostalCode = "189673",
                            Rating = 3,
                            RoomImage = "/Images/urban_boutique_hotel.jpg",
                            RoomTypes = "Standard, Deluxe, Suite",
                            Wifi = true,
                            lat = 1.2945,
                            longitute = 103.8545
                        },
                        new
                        {
                            Id = 7,
                            Address = "31 Avenue George V",
                            AveragePricePerNight = 950m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 14, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 12, 0, 0, 0),
                            City = "Paris",
                            ContactEmail = "info@fourseasons.com",
                            ContactPhone = "+33149527000",
                            Country = "France",
                            Description = "Luxury accommodations with an Art Deco flair in Paris.",
                            Gym = true,
                            Name = "Four Seasons Hotel George V",
                            NumberOfAdults = 2,
                            NumberOfChildren = 3,
                            NumberOfRooms = 244,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = true,
                            PostalCode = "75008",
                            Rating = 4,
                            RoomImage = "/Images/historic_inn.jpg",
                            RoomTypes = "Standard, Deluxe, Suite",
                            Wifi = true,
                            lat = 48.868600000000001,
                            longitute = 2.3005
                        },
                        new
                        {
                            Id = 8,
                            Address = "Taj East Gate Road, Paktola, Tajganj",
                            AveragePricePerNight = 550m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 14, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 12, 0, 0, 0),
                            City = "Agra",
                            ContactEmail = "info@oberoihotels.com",
                            ContactPhone = "+915622231515",
                            Country = "India",
                            Description = "Luxury hotel with views of the Taj Mahal.",
                            Gym = true,
                            Name = "The Oberoi Amarvilas",
                            NumberOfAdults = 2,
                            NumberOfChildren = 3,
                            NumberOfRooms = 102,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = true,
                            PostalCode = "282001",
                            Rating = 5,
                            RoomImage = "/Images/ski_lodge.jpg",
                            RoomTypes = "Standard, Deluxe, Suite",
                            Wifi = true,
                            lat = 27.1739,
                            longitute = 78.042100000000005
                        },
                        new
                        {
                            Id = 9,
                            Address = "48 Oriental Avenue",
                            AveragePricePerNight = 700m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 14, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 12, 0, 0, 0),
                            City = "Bangkok",
                            ContactEmail = "info@mandarinoriental.com",
                            ContactPhone = "+6626599000",
                            Country = "Thailand",
                            Description = "Historic luxury hotel on the banks of the Chao Phraya River.",
                            Gym = true,
                            Name = "Mandarin Oriental, Bangkok",
                            NumberOfAdults = 2,
                            NumberOfChildren = 3,
                            NumberOfRooms = 331,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = true,
                            PostalCode = "10500",
                            Rating = 3,
                            RoomImage = "/Images/desert_oasis.jpg",
                            RoomTypes = "Standard, Deluxe, Suite",
                            Wifi = true,
                            lat = 13.7204,
                            longitute = 100.51479999999999
                        },
                        new
                        {
                            Id = 10,
                            Address = "10 Bayfront Ave",
                            AveragePricePerNight = 450m,
                            Breakfast = true,
                            CheckInTime = new TimeSpan(0, 15, 0, 0, 0),
                            CheckOutTime = new TimeSpan(0, 11, 0, 0, 0),
                            City = "Singapore",
                            ContactEmail = "info@marinabaysands.com",
                            ContactPhone = "+6566888888",
                            Country = "Singapore",
                            Description = "Futuristic hotel with an iconic infinity pool.",
                            Gym = true,
                            Name = "Marina Bay Sands",
                            NumberOfAdults = 2,
                            NumberOfChildren = 3,
                            NumberOfRooms = 2561,
                            PaidA = 0.0,
                            Parking = true,
                            Pool = true,
                            PostalCode = "018956",
                            Rating = 1,
                            RoomImage = "/Images/lakefront_lodge.jpg",
                            RoomTypes = "Standard, Deluxe, Suite",
                            Wifi = true,
                            lat = 1.2834000000000001,
                            longitute = 103.86069999999999
                        });
                });

            modelBuilder.Entity("Hotel.org.Models.RentalCars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DropoffDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RentalCars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 40.712800000000001,
                            Location = "New York, NY",
                            Longitude = -74.006,
                            Make = "Toyota",
                            Model = "Camry",
                            PricePerDay = 50m,
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 34.052199999999999,
                            Location = "Los Angeles, CA",
                            Longitude = -118.2437,
                            Make = "Honda",
                            Model = "Civic",
                            PricePerDay = 45m,
                            Year = 2019
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 41.878100000000003,
                            Location = "Chicago, IL",
                            Longitude = -87.629800000000003,
                            Make = "Ford",
                            Model = "Mustang",
                            PricePerDay = 70m,
                            Year = 2018
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 29.760400000000001,
                            Location = "Houston, TX",
                            Longitude = -95.369799999999998,
                            Make = "Chevrolet",
                            Model = "Malibu",
                            PricePerDay = 55m,
                            Year = 2021
                        },
                        new
                        {
                            Id = 5,
                            Latitude = 33.448399999999999,
                            Location = "Phoenix, AZ",
                            Longitude = -112.074,
                            Make = "Nissan",
                            Model = "Altima",
                            PricePerDay = 40m,
                            Year = 2017
                        },
                        new
                        {
                            Id = 6,
                            Latitude = 39.952599999999997,
                            Location = "Philadelphia, PA",
                            Longitude = -75.165199999999999,
                            Make = "BMW",
                            Model = "3 Series",
                            PricePerDay = 80m,
                            Year = 2020
                        },
                        new
                        {
                            Id = 7,
                            Latitude = 29.424099999999999,
                            Location = "San Antonio, TX",
                            Longitude = -98.493600000000001,
                            Make = "Mercedes-Benz",
                            Model = "C-Class",
                            PricePerDay = 85m,
                            Year = 2019
                        },
                        new
                        {
                            Id = 8,
                            Latitude = 32.715699999999998,
                            Location = "San Diego, CA",
                            Longitude = -117.1611,
                            Make = "Audi",
                            Model = "A4",
                            PricePerDay = 90m,
                            Year = 2021
                        },
                        new
                        {
                            Id = 9,
                            Latitude = 32.776699999999998,
                            Location = "Dallas, TX",
                            Longitude = -96.796999999999997,
                            Make = "Hyundai",
                            Model = "Sonata",
                            PricePerDay = 50m,
                            Year = 2018
                        },
                        new
                        {
                            Id = 10,
                            Latitude = 37.338200000000001,
                            Location = "San Jose, CA",
                            Longitude = -121.88630000000001,
                            Make = "Kia",
                            Model = "Optima",
                            PricePerDay = 45m,
                            Year = 2020
                        });
                });

            modelBuilder.Entity("Hotel.org.Models.Reviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddedForFlight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddedForHotel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("Hotel.org.Models.Support", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("Hotel.org.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CardCV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CardExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tierLevels")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Hotel.org.Models.UserVerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerificationCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hotel.org.Models.BookedFlights", b =>
                {
                    b.HasOne("Hotel.org.Models.Flights", "Flights")
                        .WithMany()
                        .HasForeignKey("FlightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.org.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flights");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Hotel.org.Models.BookedHotels", b =>
                {
                    b.HasOne("Hotel.org.Models.Hotels", "hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.org.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hotel");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Hotel.org.Models.FavouritedFlights", b =>
                {
                    b.HasOne("Hotel.org.Models.Flights", "flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.org.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("flight");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Hotel.org.Models.Favourites", b =>
                {
                    b.HasOne("Hotel.org.Models.Hotels", "hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.org.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hotel");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Hotel.org.Models.Flights", b =>
                {
                    b.HasOne("Hotel.org.Models.Hotels", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.org.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel.org.Models.Hotels", b =>
                {
                    b.HasOne("Hotel.org.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Hotel.org.Models.Reviews", b =>
                {
                    b.HasOne("Hotel.org.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Hotel.org.Models.Support", b =>
                {
                    b.HasOne("Hotel.org.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel.org.Models.UserVerificationCode", b =>
                {
                    b.HasOne("Hotel.org.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hotel.org.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hotel.org.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.org.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hotel.org.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
